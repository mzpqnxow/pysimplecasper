#!/usr/bin/env python
# -*- coding: utf-8 -*-
from contextlib import contextmanager
from errno import ENOENT, ENOTEMPTY
import os
import pwd
from shutil import copy, rmtree
import subprocess as sp
from time import sleep

# Basic required directories for a virtualenv
VENV_DIRS = set(['lib', 'bin', 'include'])
# Taken from etc/
INI_FILES = set(['.pip.ini', '.interactive'])
# Put your dependencies in these files in your empty venv directory
PKG_REQUIREMENT_FILEPATHS = set(['requirements.txt',
                                 'etc/requirements.txt'])
# By default, use the 'system python'
DEFAULT_VENV_BASE_PYTHON = '/usr/bin/python'


def basic_env(cwd):
    """ Set environment """
    pent = pwd.getpwuid(os.getuid())
    env = dict()
    env['PYTHONPATH'] = '%s/packages/lib/python2.6/site-packages/' % cwd
    env['HOME'] = pent.pw_dir
    env['SHELL'] = pent.pw_shell
    env['LOGNAME'] = pent.pw_name
    env['PWD'] = os.getcwd()
    for key in ('PATH', 'TERM', 'MAIL', 'VIRTUAL_ENV', 'PIP_CONFIG_FILE'):
        if key in os.environ:
            env[key] = os.environ[key]

    return env


@contextmanager
def pushd(directory):
    cwd = os.getcwd()  # saved
    try:
        os.chdir(directory)
    except OSError as err:
        if err.errno == ENOENT:
            raise RuntimeError('%s does not exist !!' % directory)
        else:
            raise err
    yield
    os.chdir(cwd)  # popd


def destroy(explain, vdirs, cfg):
    print '%s: destroying %s' % (explain, ('/ '.join(vdirs) + '/'))
    # rmtree can fail if there are stale .nfs files
    # so put it in a loop
    retry = 10  # don't try forever
    done = False
    while retry > 0 and not done:
        retry, done = (retry - 1, True)
        for directory in vdirs:
            try:
                rmtree(directory)
            except OSError as err:
                if err.errno == ENOENT:
                    pass  # directory already gone
                elif err.errno == ENOTEMPTY:
                    done = False  # try again if retry isn't exhausted.
                else:
                    raise err  # re-raise something is wrong.
        if not done:
            # Filesystem syncing (NFS?)
            sleep(2)

    print '%s: destroying %s' % (explain, (' '.join(cfg)))
    for cfgfile in cfg:
        try:
            os.unlink(cfgfile)
        except (IOError, OSError):
            pass


def invoke_virtualenv(virtualenv_exe, python, pipini, interactive, cwd):
    """ Run virtualenv with the arguments and environment set """
    try:
        sp.check_call([python, virtualenv_exe, '--no-site-packages', '.'],
                      env=basic_env(cwd))
    except OSError as err:
        if err.errno == ENOENT:
            raise RuntimeError('Python %s does not exist !!' % python)
        else:
            raise err

    copy(pipini, '.pip.ini')
    copy(interactive, '.interactive')


def pip(pip_exe, ini, require, cwd):
    """
        Set 'PIP_CONFIG_FILE' environment variable to ini, then call
        exe as pip using the require file.
    """
    os.environ['PIP_CONFIG_FILE'] = ini

    req = None
    for req in require:
        if os.path.exists(req):
            break
    else:
        print 'WARNING: none of %s exist, skipping pip' % (str(require))
        return

    sp.check_call([pip_exe, 'install', '--pre', '-I', '-r', req], env=basic_env(cwd))


def main(argc, argv):
    # Compatible with 2.6.x and 2.7.x so stuck with OptionParser
    from optparse import OptionParser

    optparser = OptionParser('usage: %prog [options] <destination>')

    optparser.add_option('-p',
                         '--python',
                         action='store',
                         type='string',
                         dest='python',
                         default=DEFAULT_VENV_BASE_PYTHON,
                         help='specify the full path to python')

    optparser.add_option('-d', '--destroy',
                         action='store_true',
                         dest='destroy',
                         default=False,
                         help='Destroy a venv')

    optparser.add_option('-i',
                         '--ini',
                         action='store',
                         dest='inifile',
                         default='pip.ini',
                         help='The pip.ini file to use from the etc/ directory')

    (args, venv_dest) = optparser.parse_args()

    if len(venv_dest) != 1:
        optparser.error('must specify destination')

    cwd = os.path.dirname(os.path.abspath(__file__))

    ini_load_path = os.path.join(cwd, 'etc/%s' % args.inifile)
    virtualenv_run_path = os.path.join(cwd, 'packages/bin/virtualenv')
    interactive_load_path = os.path.join(cwd, 'etc/interactive')

    try:
        with pushd(venv_dest[0]):
            if args.destroy:
                destroy('requested destroy and recreate', VENV_DIRS, INI_FILES)
                invoke_virtualenv(virtualenv_run_path,
                                  args.python,
                                  ini_load_path,
                                  interactive_load_path,
                                  cwd)

            files_exist = [os.path.exists(entry) for entry in VENV_DIRS | INI_FILES]
            if not all(files_exist):
                # at least one virtualenv dir missing
                if any(files_exist):
                    destroy('incomplete virtualenv detected', VENV_DIRS, INI_FILES)
                else:
                    print 'no virtual env detected'
                invoke_virtualenv(virtualenv_run_path,
                                  args.python,
                                  ini_load_path,
                                  interactive_load_path,
                                  cwd)

            # always try to install the requirements.
            pip('bin/pip', ini_load_path, PKG_REQUIREMENT_FILEPATHS, cwd)

    except RuntimeError as err:
        optparser.error('%s Destination virtualenv directory and Python intrpreter must both exist !!' %
                        (str(err)))


if __name__ == '__main__':
    from sys import argv as ARGV
    main(len(ARGV), ARGV)
